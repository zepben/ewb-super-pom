name: Build CI Container

on:
  repository_dispatch:
    types: [build-container]
    inputs:
      push_image:
        description: If the image should be pushed to the registry
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      commit:
        description: 'Initial commit to layer the resulting image'
        required: true
        type: string
      push_image:
        description: If the image should be pushed to the registry
        type: boolean
        default: true

  # Build container on PR open and switch to ready
  pull_request:
    types: [opened, ready_for_review]
 
jobs:
  parse-inputs:
    runs-on: ubuntu-latest
    outputs:
      # A list of commits to include in the build. Expected to be the head commit when incrementing, or the full range when rebuilding.
      commits: ${{ steps.check.outputs.commits }}
      # The image to use for the build. Expected to be the previous image when incrementing, or the java base image when rebuilding.
      action_build_container: ${{ steps.check.outputs.action_build_container }}
      # The first commit SHA to be included in the image (not just this HEAD run)
      base_commit: ${{ steps.check.outputs.base_commit }}
      # The last commit SHA to be included in the image for this run
      last_commit: ${{ steps.check.outputs.last_commit }}
      # The version label for the image if provided
      version: ${{ steps.check.outputs.version }}
      # The commit SHA used to build the pipeline-java base image used to build this image.
      pipeline_java_commit: ${{ steps.check.outputs.pipeline_java_commit }}
      # The version of the pipeline-java base image used to build this image.
      pipeline_java_version: ${{ steps.check.outputs.pipeline_java_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check and parse inputs
        id: check
        run: |
          # Check whether the commit was provided
          if [ "z${{ inputs.commit }}" != "z" ]; then

            # We're on some commit, so rebuild the whole image
            ## find all commits to layer in the image

            ## This is a special format of putting a multiline
            ## string into a value inside $GITHUB_OUTPUT
            ## It's using the heredoc format, so
            ## that's why it's not in a standard Github's "var=value" syntax
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$(git rev-list --ancestry-path ${{ inputs.commit }}~1..HEAD)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            ## detect the container to build the repository with
            echo "action_build_container=zepben/pipeline-java" >> $GITHUB_OUTPUT

            ## find the first commit to start the build with
            echo "base_commmit=${{ inputs.commit }}" >> $GITHUB_OUTPUT
          else
            # We're on HEAD, so update the existing image
            echo "commits=HEAD" >> $GITHUB_OUTPUT
            echo "action_build_container=zepben/pipeline-java-ewb" >> $GITHUB_OUTPUT

            # We don't have any base commit, so
            # fetch it from the latest image
            pipeline_java_ewb_labels=$(skopeo inspect docker://zepben/pipeline-java | jq .Labels)
            echo "base_commit=$(echo $pipeline_java_ewb_labels | jq .base_commit)" >> $GITHUB_OUTPUT

            # Figure out a version
            if [ "z${{ github.event.client_payload.version }}" != "z" ]; then
              # If our automated dispatch provided a version, use it
              echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
            else
              # Otherwise, it means we're just rebasing on a new pipeline, 
              # so fetch it from the latest self image
              echo "version=$(echo $pipeline_java_ewb_labels | jq .version)" >> $GITHUB_OUTPUT
            fi 
          fi

          # basic pipeline-java labels to include in the our final container
          pipeline_java_labels=$(skopeo inspect docker://zepben/pipeline-java | jq .Labels)
          echo "pipeline_java_commit=$(echo $pipeline-java-labels | jq .commit)" >> $GITHUB_OUTPUT
          echo "pipeline_java_version=$(echo $pipeline-java-labels | jq .version)" >> $GITHUB_OUTPUT

          # set the last commit to whatever caused this flow to run
          # this would be HEAD off the branch where launched
          #   or main, if built from remote_dispatch
          echo "last_commit=$GITHUB_SHA" >> $GITHUB_OUTPUT

  build-repository:
    runs-on: ubuntu-latest
    needs: [parse-inputs]
    container: ${{ needs.parse-inputs.outputs.action_build_container }} 
    env:
      ZEPBEN_GPG_KEY: ${{ secrets.ZEPBEN_GPG_KEY }}
      MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GPG_KEY_PASSWORD: ${{ secrets.GPG_KEY_PASSWORD }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      LOCAL_REPO: /maven
    steps:
      - uses: actions/checkout@v4

      - name: Build repository
        id: build
        run: |
          # parse commits as a list
          commits=( ${{ needs.parse-inputs.outputs.commits }} )
          for commit in "${commits[@]}"; do
            git checkout $commit
            ./maven-build.sh 
          done 
        shell: bash

      - name: Store repository for wrapping in container  
        uses: actions/upload-artifact@v4
        id: upload
        if: steps.build.outcome == 'success'
        with:
          name: repo
          path: /maven
          if-no-files-found: error
        continue-on-error: false

  build-container:
    runs-on: ubuntu-latest
    needs: [parse-inputs, build-repository]
    env:
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      LOCAL_REPO: local_repo
      BASE_IMAGE: zepben/pipeline-java
    steps:

      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}
          registry: docker.io

      - name: Download repository
        uses: actions/download-artifact@v4
        with:
          name: repo
          path: ${{ env.LOCAL_REPO }}
        continue-on-error: false

      - name: Figure out tags and labels
        id: labels
        run: |
          if [ "z${{ github.event.client_payload.base_image }}" != "z" ]; then
            # Some base_image with label was given via a remote call, so override the env
            echo "BASE_IMAGE=${{ github.event.client_payload.base_image }}" >> $GITHUB_ENV
          fi

          # Create the Dockerfile
          # Replace BASE_IMAGE and LOCAL_REPO in Dockerfile template
          # BASE_IMAGE is set as env on the whole job and updated above if needed
          # LOCAL_REPO is set as env on the whole job and used to download the artefact
          cd for-ci-build-image
          cat Dockerfile.in | envsubst > Dockerfile

          # Check Dockerfile
          cat Dockerfile

      - name: Get SHAs
        id: sha
        run: |
          SHORT_REF=$(git rev-parse --short HEAD)
          LONG_REF=$(git rev-parse HEAD)
          echo "short_ref=$SHORT_REF" >> $GITHUB_OUTPUT
          echo "long_ref=$LONG_REF" >> $GITHUB_OUTPUT

      # Priority sorting determines the tag used in the OCI label
      # The current order preferences the version, then commit, then any special tags
      # We always push a commit based tag
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zepben/pipeline-java-ewb
          labels: |
            base_commit=${{ needs.parse-inputs.outputs.base_commit }}
            last_commit=${{ needs.parse-inputs.outputs.last_commit }}
            pipeline_java_commit=${{ needs.parse-inputs.outputs.pipeline_java_commit }}
            pipeline_java_version=${{ needs.parse-inputs.outputs.pipeline_java_version }}
            version=${{ needs.parse-inputs.outputs.version }}
            org.opencontainers.image.vendor=Zepben
          tags: |
            type=raw,value=${{ github.ref_name }}-${{ steps.sha.outputs.short_ref }},enable=${{ github.ref_name != 'main' }},priority=200
            type=raw,value=${{ steps.sha.outputs.short_ref }},enable=${{ github.ref_name == 'main' }},priority=200
            type=raw,value=${{ github.ref_name }},enable=${{ github.ref_name != 'main' }},priority=110
            type=raw,value=${{ needs.parse-inputs.outputs.version }},enable=${{ needs.parse-inputs.outputs.version  != '' }},priority=105
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }},priority=100


      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ inputs.build-args }}
          secret-files: |
            npm=/home/runner/.npmrc
            maven=/home/runner/.m2/settings.xml
            nuget=/home/runner/.nuget/NuGet/NuGet.Config


